/**
 * Практическое занятие №2. Побитовые операторы. Директивы препроцессора.
 * Указатели.
 */

#include <iostream>
#include <cmath>
int main()
{
    /**
     * Задание 1. Побитовая арифметика (and, or, xor, not), сдвиги.
     */

    /**
     * Задание 1.1.
     * 
     * Задайте значение переменной `y`, например, с помощью потока ввода.
     *
     * 1. С помощью побитовых операторов и операторов сдвига выведите значение
     *    переменной `y` на консоль в двоичном виде.
     * 2. Сделайте то же, но пропустив незначащие нули.
     *
     * Например, если `y == 9`, то должно получиться
     * 1. `0 0 0 0 ... 0 0 1 0 0 1` (количество двоичных цифр зависит от
     *    платформы).
     * 2. `1 0 0 1`.
     *
     * Что выведет ваша программа, если ввести отрицательное число? Объясните
     * этот результат.
     */

    {
        int y;
        std::cout << "Введите y: ";
        std::cin >> y;
        size_t y_size = sizeof(y);
        for(short i = y_size * 8 - 1; i > -1; i--){
            std::cout << ((y >> i) & 1);
            if (i % 8 == 0){
                std::cout << " ";
            }
        }
        std::cout << std::endl;
        bool flag = false;
        for(short i = y_size * 8 - 1; i > -1; i--){
            bool bit = ((y >> i) & 1);
            flag = flag || bit;
            if (flag){
                std::cout << bit;
                if (i % 8 == 0){
                    std::cout << " ";
                }
            }
        }
        std::cout << std::endl;
        //если ввести отрицательное число, программа выведет дополнительный код этого числа
    }

    /**
     * Задание 1.2.
     *
     * Дана целая переменная `y`, задайте ее значение, например, с помощью
     * потока ввода.
     *
     * В рамках одного цикла "сдвиньте" все единицы в переменной `y` вправо,
     * обновив тем самым значение этой переменной.
     *
     * Например:
     * было:  0100 1111 0000 0000 0110 1111 0000 0010
     * стало: 0000 0000 0000 0000 0000 1111 1111 1111
     *
     * Выведите переменную на экран в двоичном виде до преобразования и после,
     * используя код из задания 1.1.
     */

    {
        int y;
        std::cout << "Введите y: ";
        std::cin >> y;
        std::cout << "Было: ";
        size_t y_size = sizeof(y);
        for(short i = y_size * 8 - 1; i > -1; i--){
            std::cout << ((y >> i) & 1);
            if (i % 8 == 0){
                std::cout << " ";
            }
        }
        std::cout << std::endl;
        int temp_y = y;
        y = 0;
        short bit_pos = 0;
        for(short i = y_size * 8 - 1; i > -1; i--){
            if ((temp_y >> i) & 1){
                y |= (1 << bit_pos);
                bit_pos++;
            }
        }
        std::cout << "Стало: ";
        for(short i = y_size * 8 - 1; i > -1; i--){
            std::cout << ((y >> i) & 1);
            if (i % 8 == 0){
                std::cout << " ";
            }
        }
        std::cout << std::endl;
    }

    /**
     * Задание 1.3.
     *
     * Дана целая переменная `y`, задайте ее значение.
     *
     * Напишите код, который с помощью побитовых операций:
     *
     * 1. вычислит `y * 2^n`, где целое `n` (0 <= n < 16) задается отдельно;
     * 2. проверит, делится ли `y` на 2, проверит, делится ли `y` на 4;
     * 3. вычислит целую часть логорифма `y` по основанию 2.
     */

    {
        using namespace std;
        int y;
        unsigned short n;
        cout << "Введите y: ";
        cin >> y;
        cout << "Введите n: ";
        cin >> n;
        cout << "y * 2^n = " << (y << n) << endl;
        cout << ((y & 1) ? "y не делится на 2" : "y делится на 2") << endl;
        cout << ((y & 3) ? "y не делится на 4" : "y делится на 4") << endl;
        unsigned short p = 0; 
        for(short i = sizeof(y) * 8 - 1; i > -1; i--){
            if ((y >> i) & 1){
                p = i;
                break;
            }
        }
        cout << "целая часть log2(y) = " << p << endl;
    }

    /**
     * Задание 1.4.
     *
     * Какие операции следует применить к заданному ниже операнду sNum для
     * того, чтобы переменная sRes приняла требуемое значение? Каждую побитовую
     * операцию можно использовать только 1 раз.
     *
     * Замечание: значения подобраны таким образом, что в каждом случае
     * достаточно использовать один оператор (и при необходимости маску). 
     */

    {
        short sNum = 0x8008; //10000000 00001000
        short sRes;
        /** sRes == 0x7ff7 */ //01111111 11110111
        sRes = ~sNum;
        /** sRes == 0x8ff8 */ //10001111 11111000
        sRes = sNum | 0x0ff0;

        /** sRes == 0x0008 */ //00000000 00001000
        sRes = sNum & 0x000f;

        /** sRes == 0x7f08 */ //01111111 00001000
        sRes = sNum ^ 0xff00;

        /** sRes == 0xf001 */ //11110000 00000001
        sRes = sNum >> 3;

        /** sRes == 0x0010 */ //00000000 00010000
        sRes = sNum << 1;
    }

    
    /**
     * Задание 2. Директивы препроцессора.
     */

    /**
     * Задание 2.1. Использование "математических" макросов стандартной
     * библиотеки.
     *
     * В заголовочном файле <cmath> (который в свою очередь включает старый
     * файл math.h) определены часто используемые математические константы,
     * например M_PI. Воспользуйтесь этой константой для вычисления длины
     * окружности.
     */

    {
        float radius;
        std::cout << "Введите радиус: ";
        std::cin >> radius;
        float circumference = 2 * M_PI * radius;
        std::cout << "Длина окружности равна " << circumference << std::endl;

    }
    
    /**
     * Задание 2.2. Макросы с параметрами.
     */

    /**
     * Задание 2.2.1.
     *
     * Напишите свою макроподстановку LENGHT которая вычисляет длину
     * окружности. 
     */

    {
        /** Протестируйте написанный макрос для следующих ситуаций */

#define LENGHT(r) (2 * M_PI * (r))
        float l1 = LENGHT(1 + 2); // должно быть 18.8495...
        float l2 = 1 / LENGHT(2); // должно быть 0.07957...
    }

    /**
     * Задание 2.2.2.
     * 
     * Определите макрос MAX(A, B) для вычисления б'ольшего значения из двух.
     */

    {
        /**
         * Используйте макрос следующим образом. Следите за изменением значений
         * переменных k, i, j. Объясните результат.
         *
         * Постарайтесь убрать побочные эффекты.
         *
         * Отметьте случаи, когда избежать побочных эффектов невозможно.
         */

#define MAX(a, b) ({decltype(a) _a = a; decltype(b) _b = b; _a > _b ? _a : _b;})
        int i = 10, j = 12, k;
        k = MAX(i, j); //k = 12
        k = MAX(j, i) * 2; //k = 24
        k = MAX(j, i+3); //k = 13
        k = MAX(i--, j++); //i = 9, j = 13, k = 12 - избежать побочных эффектов невозможно из-за операций инкремента и декремента. если написать просто #define MAX(a, b) ((a) > (b) ? (a) : (b)), то i-- и j++ применится 2 раза, чего быть не должно
    }

    /**
     * Задание 2.2.3. 
     *
     * Определите макрос EXCHANGE(X, Y)  для перестановки двух объектов типа
     * int в памяти местами. 
     *
     * Проверьте для приведенного фрагмента. 
     *
     * Подумайте, что будет делать макроподстановка, если переставляемые
     * значения разного типа???
     */

    {
        
#define EXCHANGE(x, y) ({decltype(x) tmp = x; x = y; y = tmp;})
        int x1=1, y1=-1;
        EXCHANGE(x1,y1);

        int x2=100, y2=-100;
        EXCHANGE(x2,y2);

        std::cout << "";
    }

    /**
     * Задание 2.3. Директивы условной трансляции.
     *
     * Выполняя следующий фрагмент, посмотрите, какое значение принимает
     * переменная iNN. 
     *
     * Что нужно сделать для того, чтобы результат был равен 0? 1? 2?
     */

    {
    /*#define NNN
    #define MMM
    для iNN = 0*/
    // #define MMM для iNN = 1
    // #define NNN для iNN = 2
    int iNN;
    #if defined NNN && defined MMM
            iNN = 0;
    #elif defined MMM
            iNN = 1;
    #elif defined NNN 
            iNN = 2;

    #else
            iNN = -1;
    #endif

    }

    /**
     * Задание 2.4. Задание директив при сборке.
     *
     * При сборке программы компилятором можно установить необходимые
     * макроподстановки с помощью ключа `-D`. Например, чтобы при сборке 
     * была определена директива `A` без значения и директива `B` со значением
     * `1`, надо добавить следующие ключи к команде сборки: `-D A -D B=1`.
     * Таким образом команда сборки будет выглядеть примерно так:
     *
     * `gcc -g -D A -D B=1 lab2.cpp`
     *
     * Уберите из кода определения макросов NNN и MMM из прошлого задания и
     * приведите команды компиляции, которые заставят переменную iNN принять
     * нужное значение. 
     * gcc -D NNN -D MMM lab2.cpp -lstdc++
     * gcc -D NNN lab2.cpp -lstdc++
     * gcc -D MMM lab2.cpp -lstdc++
     * 
     * Проверьте их работоспособность.
     */

    /**
     * Задание 2.5. Сборки "DEBUG" и "RELEASE". Предопределенные макросы
     * компилятора.
     *
     * При отладке удобно выводить дополнительную информацию, которая может
     * мешать в итоговой (релизной) версии программы.
     *
     * Существует стандартный макрос, который принято устанавливать при
     * релизной сборке - `NDEBUG`.
     *
     * С помощью макроса NDEBUG и предопределенных макросов выведите на консоль
     * для отладочной версии информацию о том, что это отладочная сборка, о
     * дате сборки, о имени файла, имени функции и строки. Для релизной сборки
     * такая информация не должна выводиться.
     *
     * Для защиты работы соберите две версии программы: отладочную и итоговую.
     * Чтобы собрать итоговую версию в другом исполняемом файле, используйте 
     * ключ компилятора `-o`, примерно так: 
     *
     * `gcc <ваши опции> -o release.out lab2.cpp`
     *  gcc -D NDEBUG -o debug2.out lab2.cpp -lstdc++
     *  gcc -o debug2.out lab2.cpp -lstdc++
     */
    #ifdef NDEBUG
        std::cout << "Debug version 513.02.01.03\nDate: " << __DATE__ << "\nFile: " << __FILE__ << "\nFunction: " << __func__ << "\nLine: " << __LINE__ << std::endl;
    #endif
    /**
     * Задание 3.Заголовочные файлы. Директива #include.
     */

    /**
     * Задания 3.1. 
     *
     * Создайте и подключите к проекту два заголовочных файла 1.h и 2.h.
     * 
     * В каждом заголовочном файле объявите перечисление с одинаковыми именами
     * констант, но сопоставьте именованным константам разные значения,
     * например:
     *
     * - 1.h - enum MyEnum{My1, My2, My3};  
     * - 2.h - enum MyEnum{My1=5, My2, My3};
     *
     * С помощью директив условной трансляции в DEBUG-версии пользуйтесь
     * значениями констант из 1.h, а в RELEASE-версии значениями констант из
     * 2.h.
     *
     * Замечание: заголовочные файлы принято подключать в верхней части файла,
     * до любых функций (хотя правила компиляции не запрещают подключить их
     * тут).
     */

    /**
     * Задание 4. Указатели. 
     */

    /**
     * Задание 4.1. 
     * 
     * Объявите объекты разных типов и проинициализируйте их.
     *
     * Объявите указатели соответствующих типов и проинициализируйте их
     * адресами заданных объектов. 
     *
     * Выполняя задание, с помощью отладчика посмотрите, какие значения будут
     * присвоены переменным-указателям и на что эти указатели "указывают".
     */

    {

    }

    /**
     * Задание 4.2.
     *
     * Объявите указатель на тип char и проинициализируйте его адресом
     * строкового литерала. Присвойте переменной типа char значение любого
     * элемента строки.
     *
     * Проверьте - возможно ли присвоить какое-либо значение по адресу,
     * задаваемому указателем?
     */

    {

    }

    /**
     * Задание 5. Арифметика указателей. Операция разыменования указателя.
     *
     * Выполните следующий код по строчкам в отладчике, проследите за
     * изменением значений указателей и значений объектов, на которые они
     * указывают. 
     *
     * Интерпретируте наблюдаемые результаты.
     */
    {
        int nAr[3] = {1,3};
        int* pn = &nAr[0];
        (*pn)++;    
        pn++;   

        char cAr[] = {'A', 'B', 'C', 'D'};
        char *pc = &cAr[0];
        (*pc) = (*pc) + 5;  
        pc = pc + 3;    
    
        double dAr[3]={1.0,2.0};
        double *pd1 = &dAr[0];
        double *pd2 = pd1;
        (*pd2) += 2;
        pd2 += 2;

        /** Объясните результат выполнения операции вычитания двух указателей */
        pd1 = &dAr[0];
        pd2 = &dAr[1];
        int nNumber = pd2 - pd1;

        /** 
         * Сравните указатели pd2 и pd1 и с помощью cout выведите результаты
         * сравнения.
         */
    }
/*
    /**
     * Задание 6. Явное преобразование указателя. 
     *
     * Иногда возникает необходимость одни и те же данные интерпретировать
     * по-разному, например, целое можно представить как совокупность четырех
     * байтов и работать с каждым байтом по отдельности. Для этого нужно иметь
     * возможность "указывать" как на целое, так и на байт. 
     * 
     * Следовательно, возникает необходимость явного преобразования указателя. 
     * 
     * Подсказка: для правильной интерпретации этого задания воспользуйтесь
     * возможностями отладчика представлять данные в интересующем Вас виде (в
     * данном случае - в шестнадцатеричном) - для этого можно использовать
     * команду print (p) с указанием шестнадцетиричного формата: `p/x`.
     */

    {
        unsigned int nObject = 0x55667788;
        unsigned int* pnObject = &nObject;
        unsigned char* pucObject;
        char cc;

        /**
         * Раскомментировав следующую строчку кода, обратите внимание на
         * сообщение компилятора - он не считает преобразование "легальным"
         * (безопасным)
         */
        // pucObject = static_cast<unsigned char*>(pnObject);

        /**
         * А такое преобразование - целиком на совести программиста. Его можно
         * применять, только четко представляя себе результат преобразования.
         */
        pucObject = reinterpret_cast<unsigned char*>(pnObject);

        /** Проследите за значениями переменной `cc`. Объясните результаты. */
        cc = pucObject[0];
        cc = pucObject[1];
        cc = pucObject[2];
        cc = pucObject[3];

        /**
         * Выполните следующие строки, наблюдая за значениями следующих
         * выражений: `cc`, `p` и `*p`.
         *
         * Зафиксируйте и интерпретируйте результаты.
         */
        cc = *(pucObject++);
        cc = (*pucObject)++;

        cc = ++*(pucObject);
        cc = *(++pucObject);
    }

    /**
     * Задание 7. Void-указатель. 
     */

    /**
     * Задание 7.1.
     * 
     * Выполняя задание, посмотрите - какие значения присваиваются
     * void-указателю.
     *
     * Обратите внимание: средствами отладчика вы не можете посмотреть
     * значения, на которые "указывает" void-указатель.
     */
    {
        void *pVoid;
        int nObject3 = 5;
        char cObject3 = 'A';
        int *pInt = &nObject3;  
        pVoid = &nObject3;
        pVoid = &cObject3;
        pVoid = pInt;

        /** 
         * Прежде, чем раскомментировать следующую строчку, вспомните: что
         * нужно сделать, чтобы выражение стало корректным?
         */
        // pInt=pVoid;

    }
    
    /**
     * Что нужно сделать для того, чтобы следующее закомментированное выражение
     * стало корректным?
     *
     * В закоментированной строке необходимо объявить void-указатель.
     */
    {
        const int n = 1;
        //... = &n;
    }

    /**
     * Задание 7.2.
     *
     * При выполнении следующего фрагмента посмотрите, какие неприятности могут
     * Вас ожидать при явном приведении типа void-указателя, который в момент
     * времени (1) указывает на double, к типу указателя на int (2).
     */

    {
        double dObject3 = 33.33;
        // ... pVoid = &dObject3;  //(1)

        // int nTmp = *(static_cast<int*>(pVoid) ); //(2) 
    }

    /**
     * Задание 8. Модификатор const. 
     */

    /**
     * Задание 8.1.
     *
     * В каждом из заданий объявите указатель требуемого вида. 
     *
     * Посредством каждого указателя попробуйте: 
     *
     * - получить значение по адресу;
     * - записать новое значение по адресу;
     * - модифицировать указатель.
     */

    /**
     * Задание 8.1.1. Указатель является константой. 
     */

    {

    }
    
    /**
     * Задание 8.1.2. Указываемое значение является константой. 
     */

    {

    }

    /**
     * Задание 8.1.3. И указатель, и указываемое значение являются константами. 
     */

    {

    }

    /**
     * Задание 8.2. Указатель на переменную, объявленную с ключевым словом
     * const. 
     *
     * Объявите указатель и проинициализируйте его выражением - `&nN`.
     */

    {
        // const int nN = 1;
    }

    /**
     * Задание 9. Указатели на указатели.
     */

    {
        int n = 1;

        /** 
         * Объявите указатель pn и проинициализируйте его так, чтобы он
         * "указывал" на n. 
         */

        /** 
         * Объявите указатель ppn и проинициализируйте его так, чтобы он
         * "указывал" на pn. 
         */

        /** 
         * Объявите указатель pppn и проинициализируйте его так, чтобы он
         * "указывал" на ppn. 
         */

        /** 
         * С помощью указателей pn, ppn и pppn получите значение объекта n и
         * присвойте его m.
         */

        // int m = ...;
    }
    return 0;
}
